<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac程序无法运行的处理办法]]></title>
    <url>%2F2019%2F07%2F05%2Fmac-program-can-not-run%2F</url>
    <content type="text"><![CDATA[Mac文件损坏处理原因：系统偏好设置-&gt;安全性与饮食-&gt;通用-&gt;允许从以下位置下载的应用 需要设置为 任何来源 。新系统中隐藏了该选项。解决方法：打开Mac终端，输入以下代码回车。 1sudo spctl --master-disable 应用程序不能打开原因：执行程序丢失了执行权限。解决方法：右键对应的执行文件-&gt;显示包内容-&gt;进入到Contents/MacOS文件夹中，这里会看到一个文件，给该文件添加执行权限即可。打开 终端 输入 chmod +x 将文件拖入然后回车。 12# 例如：chmod +x /Applications/Xcode.app/Contents/MacOS/Xcode]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>system</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10 Samba连接不上问题]]></title>
    <url>%2F2019%2F07%2F05%2Fwin10-samba-can-not-connection%2F</url>
    <content type="text"><![CDATA[更新到Win10 1709之后的版本后Samba会连接不上。需要做如下设置： 在Windows功能中启用如下功能1234SMB 1.0/CIFS 文件共享支持 SMB 1.0/CIFS 服务器 SMB 1.0/CIFS 客户端SMB 直通 在注册表regedit中加入或修改如下键1234HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters\AllowInsecureGuestAuthDWORD (32位) 值设置为1 重启电脑，即可！]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>system</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[环境变量]]></title>
    <url>%2F2019%2F07%2F05%2Fenvironmental-variable%2F</url>
    <content type="text"><![CDATA[查看环境变量，添加环境变量，删除环境变量(cmd)123456789#node中常用的到的环境变量是NODE_ENV，首先查看是否存在set NODE_ENV#如果不存在则添加环境变量set NODE_ENV=production#环境变量追加值set 变量名=%变量名%;变量内容set path=%path%;C:\web;C:\Tools#某些时候需要删除环境变量set NODE_ENV= 查看环境变量，添加环境变量，删除环境变量(powershell)12345678910#node中常用的到的环境变量是NODE_ENV，首先查看是否存在$env:NODE_ENV#如果不存在则添加环境变量$env:NODE_ENV="production"#环境变量追加值$env:path=$env:path + ";C:\web;C:\Tools"#某些时候需要删除环境变量del env:NODE_ENV#某些时候需要显示所有的环境变量ls env: 查看环境变量，添加环境变量，删除环境变量(linux)环境变量文件顺序位置： 123456# 所有用户/etc/profile# 当前用户~/.bash_profile# 在文件末尾添加如下格式的环境变量（MacOS中为PATH）export path=$path:/home/download:/usr/local/ 修改完成后运行，下列命令重新加载 1234# 修改/etc/profile文件后source /etc/profile# 修改~/.bash_profile文件后source .bash_profile 直接在命令行中添加，重启后失效 12345678910#node中常用的到的环境变量是NODE_ENV，首先查看是否存在echo $NODE_ENV#如果不存在则添加环境变量export NODE_ENV=production#环境变量追加值export path=$path:/home/download:/usr/local/#某些时候需要删除环境变量unset NODE_ENV#某些时候需要显示所有的环境变量env]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>system</tag>
        <tag>macos</tag>
        <tag>windows</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让vs code支持region和endregion]]></title>
    <url>%2F2019%2F07%2F05%2Fvscode-support-region-and-endregion%2F</url>
    <content type="text"><![CDATA[在 Microsoft VS Code\resources\app\extensions/XXX/language-configuration.json 文件的最后一个 } 前加入如下内容： 12345678, &quot;folding&quot;: &#123; &quot;offSide&quot;: true, &quot;markers&quot;: &#123; &quot;start&quot;: &quot;^\\s*//\\s*#?region&quot;, &quot;end&quot;: &quot;^\\s*//\\s*#?endregion&quot; &#125; &#125; 文件路径中的 XXX 为你要使用的语言，例如go、php等。 本示例语言使用 // 作为注释标识。开始部分使用 //region 或 //#region ，结束部分使用 //endregion 或 //#endregion 。 如使用语言不使用 // 作为注释标识，则将 start 和 end 中的 // 替换为对应的注释标识。]]></content>
      <categories>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>setting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设置 windows 每天定时开关机]]></title>
    <url>%2F2019%2F07%2F05%2Fset-windows-daily-time-switch-machine%2F</url>
    <content type="text"><![CDATA[1. 在主板上设置 每天定时开机的时间。最好提前10分钟。 2. 在Windows中加入一个开机登陆的计划任务开机登陆-&gt;常规-&gt;安全选项 运行任务时，请使用下列用户账户：选择要登陆的用户，并输入密码。 勾选不管用户是否登录都要运行。【不要勾选不存储密码】 勾选使用最高权限运行。 配置：您的操作系统，我这里是Windows 10。 开机登陆-&gt;触发器 选择 在系统启动时 。 开机登陆-&gt;操作 这里添加两个，如下：即为打开记事本，然后关闭掉记事本。 12启动程序：notepad.exe启动程序：TASKKILL 添加参数：/IM notepad.exe 开机登陆-&gt;条件 勾选唤醒计算机运行此任务 3. 在Windows中加入一个定时关机的计划任务开机登陆-&gt;常规-&gt;安全选项 运行任务时，请使用下列用户账户：选择要登陆的用户，并输入密码。 勾选不管用户是否登录都要运行。【不要勾选不存储密码】 勾选使用最高权限运行。 配置：您的操作系统，我这里是Windows 10。 开机登陆-&gt;触发器 选择 每天 ，指定时间，例如19:00。 开机登陆-&gt;操作 启动程序：shutdown.exe 添加参数：-s -t 100 开机登陆-&gt;条件 勾选唤醒计算机运行此任务]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>system</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Hexo上写文章]]></title>
    <url>%2F2019%2F07%2F03%2Fwrite-on-hexo%2F</url>
    <content type="text"><![CDATA[1. 新机器上运行1.1. 所需环境安装所需环境：node和git 。 由于总所周知的原因，还需要安装cnpm。 1npm install -g cnpm --registry=https://registry.npm.taobao.org 1.2. 安装hexo和所需环境进入到hexo对应目录，例如jasperxu.github.io 123cd jasperxu.github.iocnpm install -g hexo-clicnpm install 1.3. 运行1234# 直接运行，http://localhost:4000/hexo s# 指定端口运行，http://localhost:8080/hexo s -p 8080 2. 写文章进入目录jasperxu.github.io/source/_posts 目录，将markdown文件放置在该目录即可。 2.1. 文件头设置12345678910111213---title: 在Hexo上写文章linkname: write-on-Hexodate: 2019-07-03updated: 2019-07-04mathjax: truecategories:- 记录tags:- blog- hexo- 使用说明--- title : 标题 linkname : 文件的链接名。:year/:month/:day/:linkname/ 建议使用小写加中划线分割 date : 文章撰写日期。上面链接中使用的也是该值。yyyy-MM-dd updated : 文章更新日期。会显示在文章中。 mathjax: true : 本文章启用数学公式。 categories : 如上示例， Hexo中的分类每行为一类，下一行为其子类。例如下面的代码 categories:- Diary- Life 会将分类Life变成Diary的子类，而不是并列分类。所以需要为文章选择尽可能准确的分类。 另：如需并列分类需要如下设置 categories: - [Linux] - [Tools] 并列+子分类： categories: - [Linux, Hexo] - [Tools, PHP] tags : 如上示例即可。 2.2. 图片将图片放置在jasperxu.github.io/source/images 文件夹中。例如叫001.png 。 文章中使用 ![](/images/001.png) 即可。 如需看效果则修改为 ![](../images/001.png) 即可。上传前记得删掉 .. 或者使用其他图床也可以。 2.3. 摘要使用 &lt;!-- more --&gt; 分割，之前的都为摘要。 3. 发布生成后自动提交到master 。命令如下： 12hexo c # 清理文件 clearhexo g -d # 生成静态文件 generate 然后部署 deploy 注：写文章使用write分支，该分支需手动提交。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>使用说明</tag>
      </tags>
  </entry>
</search>
